import React, {useContext, useRef, useState} from 'react';import {AppBar, Box, Button, IconButton, Slider, TextField, Toolbar, Typography} from "@mui/material";import {useNavigate} from 'react-router-dom'import context from "../context/mainContext";import ExitToAppIcon from '@mui/icons-material/ExitToApp';import http from "../plugins/http";import SearchIcon from '@mui/icons-material/Search';import SearchDatePicker from "./SearchDatePicker";const Header = () => {    const nav = useNavigate()    const {        username,        setUsername,        admin,        setAdmin,        setAds,        showSearch,        setShowSearch,        page,        setPage    } = useContext(context)    const [dateValues, setDateValues] = React.useState([null, null]);    const [sliderValue, setSliderValue] = useState([0, 100]);    const [reset, setReset] = useState(false)    const city = useRef()    const showCreate = admin && page !== 'create'    const handleChange = (event, newValue) => {        setSliderValue(newValue);    };    function navCreate() {        setReset(false)        setShowSearch(false)        setPage('create')        nav('/create')    }    function navMain() {        setReset(false)        setShowSearch(false)        nav('/')    }    async function exit() {        const data = await http.get('exit')        if (data.success) {            setUsername('')            setAdmin(false)            localStorage.clear()        }    }    async function searchFunc() {        const searchValues = {            searchCity: city.current.value,            searchPrice: sliderValue,            days: dateValues        }        const data = await http.post(searchValues, 'search')        if (data.success) {            setAds(data.message)            setReset(true)            nav('/')        }    }    async function resetFunc() {        const data = await http.get('get-ads')        if (data.success) setAds(data.message)        setReset(false)        setShowSearch(false)    }    return (        <AppBar position={'static'}>            <Toolbar style={{display: 'flex', flexDirection: "column", background: 'crimson'}}>                <div className='w-100 d-flex j-btw'>                    <Button variant={'contained'} onClick={navMain} sx={{m: 1}}>Main page</Button>                    {!username && <div>                        <Button variant={'contained'} onClick={() => nav('/register')} sx={{m: 1}}>Register</Button>                        <Button variant={'contained'} onClick={() => nav('/login')} sx={{m: 1}}>login</Button>                    </div>}                    {showCreate &&                        <Button variant={'contained'} onClick={navCreate} sx={{m: 1}}>create ad</Button>}                    {username && <Box style={{display: 'flex', alignItems: 'center'}}>                        <IconButton onClick={() => setShowSearch(!showSearch)} style={{color: "white"}}>                            <SearchIcon/>                        </IconButton>                        <Typography variant={'h6'} sx={{mr: 3, ml: 3}}>                            {username}                        </Typography>                        <ExitToAppIcon cursor={'pointer'} onClick={exit}/>                    </Box>}                </div>                {showSearch && <Box style={{                    display: "flex",                    alignItems: "center",                    justifyContent: "space-evenly",                    flexWrap: "wrap",                    backgroundColor: "white",                    border: '2px solid black',                    borderRadius: 10,                    padding: 10,                    width: '100%',                    color: "black"                }}>                    <TextField                        style={{margin: '0 20px'}}                        id="outlined-basic"                        label="City"                        variant="outlined"                        inputRef={city}                    />                    <Box style={{width: 300, display: "flex", flexDirection: "column"}}>                        <Typography variant={"button"}>                            Price                        </Typography>                        <Slider                            getAriaLabel={() => 'Temperature range'}                            value={sliderValue}                            onChange={handleChange}                            valueLabelDisplay="auto"                            style={{width: 200}}                        />                    </Box>                    <SearchDatePicker setDateValues={setDateValues}/>                    <div>                        <Button onClick={searchFunc} style={{margin: 10}} variant={"contained"}>                            Search                        </Button>                        {reset && <Button onClick={resetFunc} style={{margin: 10}} variant={"contained"}>                            reset                        </Button>}                    </div>                </Box>}            </Toolbar>        </AppBar>    );};export default Header;