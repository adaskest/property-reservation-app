const bcrypt = require('bcrypt');const userDB = require('../schemas/userSchema')const adDb = require('../schemas/adSchema')module.exports = {    register: async (req, res) => {        const {email, passwordOne, admin} = req.body        const hash = await bcrypt.hash(passwordOne, 10)        const user = new userDB        user.email = email        user.password = hash        user.admin = admin        await user.save()        res.send({success: true})    },    login: async (req, res) => {        const {email} = req.body        req.session.user = email        const user = await userDB.findOne({email})        res.send({success: true, id: user._id, admin: user.admin})    },    getUser: async (req, res) => {        const {id} = req.params        const user = await userDB.findOne({_id: id})        req.session.user = user.email        res.send({success: true, username: user.email, admin: user.admin})    },    exit: (req, res) => {        req.session.destroy();        res.clearCookie('connect.sid').send({success: true});    },    checkImg: (req, res) => {        const {photo} = req.body        if (photo.length === 0 || !photo.includes('http')) return res.send({            success: false,            message: 'Check photo link'        })        res.send({success: true})    },    createAd: async (req, res) => {        const {photos, city, price, description, time} = req.body        const {user} = req.session        const ad = new adDb        ad.photos = photos        ad.city = city        ad.price = price        ad.description = description        ad.user = user        ad.time = time        ad.reservation = []        await ad.save()        res.send({success: true})    },    getAds: async (req, res) => {        const ads = await adDb.find()        res.send({success: true, message: ads})    },    getAd: async (req, res) => {        const {id} = req.params        const ad = await adDb.findOne({_id: id})        res.send({success: true, message: ad})    },    reservation: async (req, res) => {        const {adID, days} = req.body        const ad = await adDb.findOne({_id: adID})        await days.map(day => ad.reservation.push(day))        await adDb.findOneAndUpdate({_id: adID}, {reservation: ad.reservation}, {new: true})        const ads = await adDb.find()        res.send({success: true, message: ads})    },    search: async (req, res) => {        const {searchCity, searchPrice, days} = req.body        const priceFilter = {$gte: searchPrice[0], $lte: searchPrice[1]}        !!searchCity.length ? await getAdsByCity() : await getAdsByPrice()        async function getAdsByPrice() {            const ads = await adDb.find({                price: priceFilter,                reservation: {$nin: days}            });            res.send({success: true, message: ads})        }        async function getAdsByCity() {            const ads = await adDb.find({                city: searchCity,                price: priceFilter,                reservation: {$nin: days}            });            res.send({success: true, message: ads})        }    }}